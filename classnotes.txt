				Pages and Routing


Page - UI
layout - UI - Container

Routing - unique identifier to identify the page

index route /home route

src
 |
 app
  -layout.js
  -page.js =====> /
  |
  about--------> /about  
    |
    page.js

  course
    |
    page.js
    layout.js
   |
   frontend
      |
     page.js
     layout.js
   cloud
      page.js
      layout.js

   /course
       <header>Your course</header
   
   /course/frontend/
 
           Your course
             frontend

    /course/cloud
        your course
            cloud

CSR + SSR

CounterPage -parent
    |
   Counter -child
.....................................................................................

Patterns:
 
1.Server component uses client compoent
2.Client uses another another client component
3.Client uses Server component

Server component uses client Component


Server component:

counter/page.js

import { Counter } from "./components/Counter";

export default function CounterPage(){
    return <div>
        <h1>Counter Page</h1>
        <Counter/>
    </div>
}

counter/components/Counter.jsx

"use client"
import { useState } from "react"

export const Counter = props => {
    //hooks
    const [counter, setCounter] = useState(0)

    //listener
    const onIncrement = () => {
        setCounter(counter + 1)
    }
    return <>
        <h1>Counter {counter} </h1>
        <button onClick={onIncrement}>+</button>
    </>

}


if client uses server, server component becomes client so we loose the purpose of server side rendering. - not recommended

if client uses server but i dont want loose the server rendering feature -?
	Pass Server Component  to Client component as "props"



<Client>
	<Server/>
</Client>


Dynamic Route:
URL Pattern
 http://localhost:3000/profile/2

http://localhost:3000/todos  
   |
  master page


http://localhost:3000/todos/1

app
 |
(marketing)     market/sales or market/advt
 layout.js
  market
   sales
     page.js
  page.js

 advt  


module.exports = {
    async redirects() {
      return [
        {
          source: '/',
          destination: '/market',
          permanent: true,
        },
      ]
    },
  }



(customer)     /customers/
 layout.js
  customers 
     add
      page.js

layout.js
page.js

http://www.mystore.com

http://localhost:3000/customers


 panel
   |
   @AdminPanel
     page.js
   @UserPanel
     page.js
  layout.js
  page.js
...................................................................................
				Data Fetching
...................................................................................

Fetching can be done in two ways

1.During request - SSR
2.During build time / prerendering - SSG

fetch api - It is highly recommened - because next has optimized fetch. 
 next internally use fetch

axios - you can use axios but external manuall configuration with respect performance and ISR.


CSR and datafecthing.

Pattern 1: 
  Convert server component as client component using 'use client' directive

'use client';

async function getAlbums() {
    const url = `https://jsonplaceholder.typicode.com/albums`
    const res = await fetch(url)
    if (!res.ok) {
        throw new Error('data is not available')
    }
    return res.json()
}
export default async function Album() {
    const albums = await getAlbums()
    return <div>
        <h1>Album</h1>
        <div>
            {albums.map(album => {
                return <h2 key={album.id}>{album.title}</h2>
            })}
        </div>
    </div>
}

Here there is no state, useEffect

 Which is not even recommened.

Pattern 2: using useState,useEffect.
'use client';
import { useState, useEffect } from 'react'

export const Albums = () => {
    const [data, setData] = useState(null)
    const [isLoading, setLoading] = useState(true)

    useEffect(() => {
        fetch('https://jsonplaceholder.typicode.com/albums')
            .then((res) => res.json())
            .then((data) => {
                setData(data)
                setLoading(false)
            })
    }, [])

    if (isLoading) return <p>Loading...</p>
    if (!data) return <p>No Album data</p>

    return (
        <div>
            {data.map(album => {
                return <h2 key={album.id}>{album.title}</h2>
            })}
        </div>
    )
}

pattern 3:

SWR - Stale-while-revalidate

The name “SWR” is derived from stale-while-revalidate, a HTTP cache invalidation strategy popularized by HTTP RFC 5861(opens in a new tab). SWR is a strategy to first return the data from cache (stale), then send the fetch request (revalidate), and finally come with the up-to-date data.

import useSWR from 'swr'
 
function Profile() {
  const { data, error, isLoading } = useSWR('/api/user', fetcher)
 
  if (error) return <div>failed to load</div>
  if (isLoading) return <div>loading...</div>
  return <div>hello {data.name}!</div>
}


'use client';

import useSWR from 'swr'

function fetcher(...args) {
    return fetch(...args).then(res => res.json())
}

export const Albums = () => {
    const url = 'https://jsonplaceholder.typicode.com/albums'
    const { data, error, isLoading } = useSWR(url, fetcher)
    if (isLoading) return <p>Loading...</p>
    if (error) return <p>No Album data</p>

    return (
        <div>
            {data.map(album => {
                return <h2 key={album.id}>{album.title}</h2>
            })}
        </div>
    )
}
.....................................................................................

Error Handling:

What is ErrorBoundary?

   Error boundaries are React components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of the component tree that crashed.


'use client' // Error components must be Client Components
 
import { useEffect } from 'react'
 
export default function Error({ error, reset }) {
  useEffect(() => {
    // Log the error to an error reporting service
    console.error(error)
  }, [error])
 
  return (
    <div>
      <h2>Something went wrong!</h2>
      <button
        onClick={
          // Attempt to recover by trying to re-render the segment
          () => reset()
        }
      >
        Try again
      </button>
    </div>
  )
}
.................................................................................
page errors are handled by "error.js"

layout and  templates errors are not handled by error.js rather we have write global-error.js

.....................................................................................
			   Database integration with next js


Setting up data base driver

npx prisma init
   ->By default it setups with "PostgreSql"

if i want other database

npx prisma init --datasource-provider sqlite


Define table mapping(model/entity mapping):
...........................................

User table
id integer
name varchar
email varchar

npx prisma migrate dev --name init

api
 |
 users
  route.js

import { prisma } from "@/lib/prisma";
import { NextResponse } from "next/server";

export async function GET(request) {
    const user = await prisma.user.findMany({});
    if (!user) {
        return new NextResponse("No users");
    }
    return NextResponse.json(user);
}
export async function POST(request) {
    try {
        const json = await request.json();
        const user = await prisma.user.create({
            data: json,
        });
        return new NextResponse(JSON.stringify(user), {
            status: 201,
            headers: { "Content-Type": "application/json" },
        });
    }
    catch (error) {
        if (error.code === "P2002") {
            return new NextResponse("User with email already exists", {
                status: 409,
            });
        }
        return new NextResponse(error.message, { status: 500 });
    }
}


src
 |
 app
  |
  api
   |
    users
      [id]
	route.js
import { prisma } from "@/lib/prisma";
import { NextResponse } from "next/server";

export async function GET(request, { params }) {
    const id = params.id;
    console.log(id)
    const user = await prisma.user.findUnique({
        where: {
            id,
        },
    });
    if (!user) {
        return new NextResponse("No user with ID found", { status: 404 });
    }
    return NextResponse.json(user);
}
export async function PATCH(request, { params }) {
    const id = params.id;
    let json = await request.json();
    const updated_user = await prisma.user.update({
        where: { id },
        data: json,
    });
    if (!updated_user) {
        return new NextResponse("No user with ID found", { status: 404 });
    }
    return NextResponse.json(updated_user);
}
export async function DELETE(request, { params }) {
    try {
        const id = params.id;
        await prisma.user.delete({
            where: { id },
        });
        return new NextResponse(null, { status: 204 });
    }
    catch (error) {
        if (error.code === "P2025") {
            return new NextResponse("No user with ID found", { status: 404 });
        }
        return new NextResponse(error.message, { status: 500 });
    }
}


findMany
findUnique
create
update
delete










































				















